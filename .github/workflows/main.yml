name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      - uses: actions/checkout@v2

      - name: MSVC environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Cache Vulkan SDK
        id: cache-vulkan-sdk
        uses: actions/cache@v1
        with:
          path: "C:\\VulkanSDK\\1.2.198.0"
          key: vulkan-sdk-1.2.198.0

      - name: Setup Vulkan
        if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true'
          run: |
            Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/1.2.198.0/windows/VulkanSDK-1.2.198.0-Installer.exe" -OutFile VulkanSDK.exe
            $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
            $installer.WaitForExit();

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: "$GITHUB_WORKSPACE\\deps\\win-x64"
          key: cache-deps-win-x64

      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
          run: python tools\deps.py --verbose

      - name: Install bfg9000
        run: python -m pip install bfg9000[msbuild]

      - name: Generate build files
        run: bfg9000 configure out\win

      - name: Build
        run: tools\ninja -C out\win

      - name: Add artifacts to folder
        run: |
          mkdir build
          xcopy /y out\win\engine\engine.dll build
          xcopy /y out\win\demo\demo.exe build
          xcopy /y deps\windows-x64\bin\* build
          xcopy /i/y deps\licenses build\licenses
          copy LICENSE build\licenses\purpl.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-windows
          path: build

      - name: Create zip of artifacts for release
        run: |
          "$Env:PROGRAMFILES\7-Zip\7z.exe a -tzip build-windows.zip build\*"

      - name: Create release with artifacts
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: build-windows.zip

  build-macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set permissions on executables
        run: |
          chmod a+x tools/deps.py
          chmod a+x tools/gn
          chmod a+x tools/ninja

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: "$GITHUB_WORKSPACE/deps/mac-x64"
          key: cache-deps-mac-x64

      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
          run: python tools/deps.py --verbose
        
      - name: Install bfg9000
        run: pip install bfg9000

      - name: Generate build files
        run: bfg9000 configure out/mac
        
      - name: Build
        run: tools/ninja -C out/mac -j$[$(sysctl -n hw.ncpu) + 2]

      - name: Add artifacts to folder
        run: |
          mkdir build
          printf '#!/usr/bin/env bash\n\nchmod a+x demo\nexportHERE="$(dirname "$0")"\n\nDYLD_LIBRARY_PATH=$HERE $HERE/demo\n' > build/purpl-demo
          cp -r out/mac/{engine/libengine.dylib,demo/demo} deps/mac-x64/* deps/licenses build
          cp LICENSE build/licenses/purpl.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-macos
          path: build

      - name: Create zip of artifacts for release
        run: |
          7z a -tzip build-macos.zip build/*

      - name: Create release with artifacts
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: build-macos.zip

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup APT packages
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.2.198-focal.list https://packages.lunarg.com/vulkan/1.2.198/lunarg-vulkan-1.2.198-focal.list
          sudo apt-get update -qq
          sudo apt-get install -y gcc-multilib python3 curl
          sudo apt-get install -y --no-install-recommends libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev libgl1-mesa-dev vulkan-sdk

      - name: Set permissions on executables
        run: |
          chmod a+x tools/deps.py
          chmod a+x tools/gn
          chmod a+x tools/ninja

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: "$GITHUB_WORKSPACE/deps/linux-x64"
          key: cache-deps-linux-x64

      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
          run: python tools/deps.py --verbose

      - name: Install bfg9000
        run: pip install bfg9000

      - name: Generate build files
        run: bfg9000 configure out/linux
        
      - name: Build
        run: tools/ninja -C out/linux -j$[$(nproc) + 2]

      - name: Add artifacts to folder
        run: |
          mkdir build
          printf '#!/usr/bin/env bash\n\nchmod a+x demo\nexportHERE="$(dirname "$0")"\n\nLD_LIBRARY_PATH=$HERE $HERE/demo\n' > build/purpl-demo
          cp -r out/linux/{engine/libengine.so,demo/demo} deps/linux-x64/* deps/licenses build
          cp LICENSE build/licenses/purpl.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-linux
          path: build

      - name: Create zip of artifacts for release
        run: |
          7z a -tzip build-linux.zip build/*

      - name: Create release with artifacts
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: build-linux.zip
