trigger:
- main

strategy:
  matrix:
    windows-msvc-dist:
      imageName: 'windows-2022'
      config: 'MinSizeRel'
      cc: 'cl'
      cxx: 'cl'
    windows-msvc-release:
      imageName: 'windows-2022'
      config: 'RelWithDebInfo'
      cc: 'cl'
      cxx: 'cl'
    windows-msvc-debug:
      imageName: 'windows-2022'
      config: 'Debug'
      cc: 'cl'
      cxx: 'cl'
    windows-clang-dist:
      imageName: 'windows-2022'
      config: 'MinSizeRel'
      cc: 'clang-cl'
      cxx: 'clang-cl'
    windows-clang-release:
      imageName: 'windows-2022'
      config: 'RelWithDebInfo'
      cc: 'clang-cl'
      cxx: 'clang-cl'
    windows-clang-debug:
      imageName: 'windows-2022'
      config: 'Debug'
      cc: 'clang-cl'
      cxx: 'clang-cl'
    macos-dist:
      imageName: 'macos-latest'
      config: 'MinSizeRel'
      cc: 'clang'
      cxx: 'clang++'
    macos-release:
      imageName: 'macos-latest'
      config: 'RelWithDebInfo'
      cc: 'clang'
      cxx: 'clang++'
    macos-debug:
      imageName: 'macos-latest'
      config: 'Debug'
      cc: 'clang'
      cxx: 'clang++'
    linux-dist:
      imageName: 'ubuntu-latest'
      config: 'MinSizeRel'
      cc: 'clang'
      cxx: 'clang++'
    linux-release:
      imageName: 'ubuntu-latest'
      config: 'RelWithDebInfo'
      cc: 'clang'
      cxx: 'clang++'
    linux-debug:
      imageName: 'ubuntu-latest'
      config: 'Debug'
      cc: 'clang'
      cxx: 'clang++'

variables:
  artifactArchive: $(Build.ArtifactStagingDirectory)/purpl-$(imageName)-$(config)-$(cc).7z
  vulkanSdkVersion: 1.3.211
  vulkanSdk: C:\VulkanSDK\$(vulkanSdkVersion).0

pool:
  vmImage: $(imageName)

steps:
  - checkout: self
    submodules: true

  - script: |
      call tools\installvulkan.bat
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: Install Vulkan SDK

  - bash: |
      chmod a+x tools/fixperms.sh
      tools/fixperms.sh
    condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
    displayName: Set executable bit on tools

  - bash: |
      curl -fsGL https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
      curl -fsGL https://packages.lunarg.com/vulkan/$(vulkanSdkVersion)/lunarg-vulkan-$(vulkanSdkVersion)-focal.list | sudo tee /etc/apt/sources.list.d/lunarg-vulkan-focal.list
      sudo apt update -qq
      sudo apt install -y libsdl2-dev vulkan-sdk
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: Install SDL and Vulkan SDK with APT

  - bash: |
      brew install sdl2
    condition: eq(variables['Agent.OS'], 'Darwin')
    displayName: Install SDL with Homebrew

  - script: |
      pip install MarkupSafe==2.1.0
      pip install Jinja2==3.0.3
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: Install requirements for glad

  - script: |
      call tools\buildenv.bat x64
      cmake -S. -Bbuild -GNinja -DVULKAN_SDK=$(vulkanSdk) -DVulkan_LIBRARY=$(vulkanSdk)/Lib/vulkan-1.lib -DVulkan_INCLUDE_DIR=$(vulkanSdk)/Include -DCMAKE_C_COMPILER=$(cc) -DCMAKE_CXX_COMPILER=$(cxx) -DCMAKE_BUILD_TYPE=$(config)
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: Generate build files (Windows)

  - script: |
      cmake -S. -Bbuild -GNinja -DVulkan_LIBRARY=/usr/lib/x86_64-linux-gnu/libvulkan.so -DCMAKE_C_COMPILER=$(cc) -DCMAKE_CXX_COMPILER=$(cxx) -DCMAKE_BUILD_TYPE=$(config) -DPURPL_USE_SYSTEM_SDL=1
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: Generate build files (Linux)

  - script: |
      cmake -S. -Bbuild -GXcode -DCMAKE_C_COMPILER=$(cc) -DCMAKE_CXX_COMPILER=$(cxx) -DCMAKE_BUILD_TYPE=$(config) -DPURPL_USE_SYSTEM_SDL=1
    condition: eq(variables['Agent.OS'], 'Darwin')
    displayName: Generate build files (macOS)

  - script: |
      call tools\buildenv.bat x64
      cmake --build build --config $(config)
      cmake --install build --config $(config)
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: Build (Windows)

  - script: |
      cmake --build build --config $(config)
      cmake --install build --config $(config)
    condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
    displayName: Build (non-Windows)

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: build/install
      archiveFile: $(artifactArchive)
      includeRootFolder: true
      archiveType: 7z
      replaceExistingArchive: true
      verbose: true

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(artifactArchive)
      artifactName: $(imageName)-$(config)-$(cc)

